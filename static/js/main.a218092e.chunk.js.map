{"version":3,"sources":["components/Cards/index.js","components/Footer/index.js","components/Header/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["Cards","props","className","alt","name","src","image","onClick","clickPicture","id","Footer","Header","children","score","topScore","Wrapper","App","state","cards","clickedArray","message","shuffleArray","picArray","i","length","j","Math","floor","random","shuffledArray","setState","includes","concat","this","map","picture","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"07BAWeA,G,MARD,SAAAC,GAAK,OACf,yBAAKC,UAAU,QACX,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,+BAA+BC,IAAKF,EAAMG,KAAMC,IAAKJ,EAAMK,MAAOC,QAAS,kBAAMN,EAAMO,aAAaP,EAAMQ,WCOlHC,G,MAVA,WACX,OACI,gCACI,uBAAGR,UAAU,YAAb,yBCMGS,G,MATA,SAAAV,GAAK,OAChB,yBAAKC,UAAU,UACX,yBAAKA,UAAU,SAASD,EAAMW,UAC9B,yBAAKV,UAAU,UAAf,UACYD,EAAMY,MADlB,eACqCZ,EAAMa,aCIpCC,G,MARC,SAACd,GACb,OACI,yBAAKC,UAAU,qBACVD,EAAMW,Y,OC+DJI,G,iNA3DbC,MAAQ,CACNC,QACAC,aAAe,GACfN,MAAO,EACPC,SAAU,EACVM,QAAS,I,EAGXC,aAAe,SAACC,GACd,IAAK,IAAIC,EAAID,EAASE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC1C,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADA,EAEb,CAACD,EAASG,GAAIH,EAASC,IAAnDD,EAASC,GAFgC,KAE5BD,EAASG,GAFmB,KAI9C,OAAOH,G,EAGXd,aAAe,SAAAC,GAEb,IAAMoB,EAAgB,EAAKR,aAAaH,GACxC,EAAKY,SAAS,CAACZ,MAAOW,IAElB,EAAKZ,MAAME,aAAaY,SAAStB,GACnC,EAAKqB,SAAS,CAAEjB,MAAO,EAAGM,aAAc,GAAIC,QAAS,yDAGrD,EAAKU,SAAS,CACZX,aAAc,EAAKF,MAAME,aAAaa,OAAO,CAACvB,IAC9CI,MAAO,EAAKI,MAAMJ,MAAQ,EAC1BO,QAAS,aAIT,EAAKH,MAAMJ,MAAQ,EAAKI,MAAMH,UAChC,EAAKgB,SAAS,CAAEhB,SAAU,EAAKG,MAAMJ,S,wEAK/B,IAAD,OACP,OACE,yBAAKX,UAAU,OACb,kBAAC,EAAD,CAAQW,MAAOoB,KAAKhB,MAAMJ,MAAOC,SAAUmB,KAAKhB,MAAMH,UAAtD,gBACA,kBAAC,EAAD,KACGmB,KAAKhB,MAAMC,MAAMgB,KAAI,SAAAC,GAAO,OAC3B,kBAAC,EAAD,CACE3B,aAAc,EAAKA,aACnBC,GAAI0B,EAAQ1B,GACZ2B,IAAKD,EAAQ1B,GACbH,MAAO6B,EAAQ7B,YAIrB,kBAAC,EAAD,W,GAtDY+B,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a218092e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst Cards = props => (\n    <div className=\"card\">\n        <div className=\"img-container\">\n        <img className=\"img-thumbnail img-responsive\" alt={props.name} src={props.image} onClick={() => props.clickPicture(props.id)}/>\n        </div>\n    </div>\n);\n\nexport default Cards;","import React from \"react\";\nimport \"./style.css\";\n\nconst Footer = () => {\n    return (\n        <footer>\n            <p className=\"nav-text\">\n                Rebecca Bartl &copy;\n            </p>\n        </footer>\n    )\n};\n\nexport default Footer;","import React from \"react\";\nimport \"./style.css\";\n\nconst Header = props => (\n    <div className=\"header\">\n        <div className=\"title\">{props.children}</div>\n        <div className=\"scores\">\n            Score: {props.score} Top Score: {props.topScore}\n        </div>\n    </div>\n);\n\nexport default Header;","import React from \"react\";\nimport \"./style.css\";\n\nconst Wrapper = (props) => {\n    return (\n        <div className=\"container wrapper\">\n            {props.children}\n        </div>\n    )\n};\n\nexport default Wrapper;","import React, { Component } from \"react\";\nimport Cards from \"./components/Cards\";\nimport Footer from \"./components/Footer\";\nimport Header from \"./components/Header\";\nimport Wrapper from \"./components/Wrapper\";\nimport cards from \"./cards.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n  // Setting this.state.cards to the cards json array\n  state = {\n    cards,\n    clickedArray : [],\n    score: 0,\n    topScore: 0,\n    message: \"\"\n  };\n\n  shuffleArray = (picArray) => {\n    for (let i = picArray.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [picArray[i], picArray[j]] = [picArray[j], picArray[i]];\n    }\n    return picArray;\n}\n\nclickPicture = id => {\n  // Arrange the pictures in a random manner\n  const shuffledArray = this.shuffleArray(cards);\n  this.setState({cards: shuffledArray});\n  // if clicked an image already clicked set this.state.score = 0; empty clickeadArray, end of if block\n  if (this.state.clickedArray.includes(id)) {\n    this.setState({ score: 0, clickedArray: [], message: \"Incorrect! Game Over. Click an image to start again!\"});\n  }\n  else {\n    this.setState({\n      clickedArray: this.state.clickedArray.concat([id]),\n      score: this.state.score + 1,\n      message: \"Correct!\",\n    });\n  }\n  // set topscore = score if score>topscore.\n  if (this.state.score > this.state.topScore) {\n    this.setState({ topScore: this.state.score });\n  }\n  \n}\n\nrender() {\n  return (\n    <div className=\"App\">\n      <Header score={this.state.score} topScore={this.state.topScore}>Clicky Game!</Header>\n      <Wrapper>\n        {this.state.cards.map(picture => (\n          <Cards\n            clickPicture={this.clickPicture}\n            id={picture.id}\n            key={picture.id}\n            image={picture.image}\n          />\n        ))}\n      </Wrapper>\n      <Footer />\n    </div>\n  )\n}\n\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}